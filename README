NAME
    Map::Tube::Moscow - Interface to the Moscow Metro Map.

SYNOPSIS
     use Map::Tube::Moscow;

     my $obj = Map::Tube::Moscow->new;
     my $routes_ar = $obj->get_all_routes($from, $to);
     my $line = $obj->get_line_by_id($line_id);
     my $line = $obj->get_line_by_name($line_name);
     my $lines_ar = $obj->get_lines;
     my $station = $obj->get_node_by_id($station_id);
     my $station = $obj->get_node_by_name($station_name);
     my $route = $obj->get_shortest_route($from, $to);
     my $stations_ar = $obj->get_stations($line);
     my $metro_name = $obj->name;
     my $xml_file = $obj->xml;

DESCRIPTION
    It currently provides functionality to find the shortest route between
    the two given nodes.

    For more information about Moscow Map, click here
    <https://ru.wikipedia.org/wiki/Московский_метрополитен>.

METHODS
  "new"
     my $obj = Map::Tube::Moscow->new;

    Constructor.

    Returns instance of object.

  "get_all_routes" [EXPERIMENTAL]
     my $routes_ar = $obj->get_all_routes($from, $to);

    Get all routes from station to station.

    Returns reference to array with Map::Tube::Route objects.

  "get_line_by_id"
     my $line = $obj->get_line_by_id($line_id);

    Get line object defined by id.

    Returns Map::Tube::Line object.

  "get_line_by_name"
     my $line = $obj->get_line_by_name($line_name);

    Get line object defined by name.

    Returns Map::Tube::Line object.

  "get_lines"
     my $lines_ar = $obj->get_lines;

    Get lines in metro map.

    Returns reference to unsorted array with Map::Tube::Line objects.

  "get_node_by_id"
     my $station = $obj->get_node_by_id($station_id);

    Get station node by id.

    Returns Map::Tube::Node object.

  "get_node_by_name"
     my $station = $obj->get_node_by_name($station_name);

    Get station node by name.

    Returns Map::Tube::Node object.

  "get_shortest_route"
     my $route = $obj->get_shortest_route($from, $to);

    Get shortest route between $from and $to node names. Node names in $from
    and $to are case insensitive.

    Returns Map::Tube::Route object.

  "get_stations"
     my $stations_ar = $obj->get_stations($line);

    Get list of stations for concrete metro line.

    Returns reference to array with Map::Tube::Node objects.

  "name"
     my $metro_name = $obj->name;

    Get metro name.

    Returns string with metro name.

  "xml"
     my $xml_file = $obj->xml;

    Get XML specification of Moscow metro.

    Returns string with XML.

EXAMPLE1
     use strict;
     use warnings;

     use Encode qw(decode_utf8 encode_utf8);
     use Map::Tube::Moscow;

     # Object.
     my $obj = Map::Tube::Moscow->new;

     # Get route.
     my $route = $obj->get_shortest_route(decode_utf8('Планерная'), decode_utf8('Белорусская'));

     # Print out type.
     print "Route: ".encode_utf8($route)."\n";

     # Output:
     # Route: Планерная (7 Таганско-Краснопресненская линия), Сходненская (7 Таганско-Краснопресненская линия), Тушинская (7 Таганско-Краснопресненская линия), Спартак (7 Таганско-Краснопресненская линия), Щукинская (7 Таганско-Краснопресненская линия), Октябрьское поле (7 Таганско-Краснопресненская линия), Полежаевская (7 Таганско-Краснопресненская линия), Беговая (7 Таганско-Краснопресненская линия), Улица 1905 года (7 Таганско-Краснопресненская линия), Баррикадная (7 Таганско-Краснопресненская линия), Пушкинская (7 Таганско-Краснопресненская линия), Кузнецкий мост (7 Таганско-Краснопресненская линия), Китай-город (6 Калужско-Рижская линия,7 Таганско-Краснопресненская линия), Тургеневская (6 Калужско-Рижская линия), Сухаревская (6 Калужско-Рижская линия), Проспект Мира (5 Кольцевая линия,6 Калужско-Рижская линия), Новослободская (5 Кольцевая линия), Белорусская (2 Замоскворецкая линия,5 Кольцевая линия)

EXAMPLE2
     use strict;
     use warnings;

     use Map::Tube::Moscow;

     # Object.
     my $obj = Map::Tube::Moscow->new;

     # Get XML file.
     my $xml_file = $obj->xml;

     # Print out XML file.
     print "XML file: $xml_file\n";

     # Output like:
     # XML file: .*/moscow-map.xml

EXAMPLE3
     use strict;
     use warnings;

     use Map::Tube::GraphViz;
     use Map::Tube::GraphViz::Utils qw(node_color_without_label);
     use Map::Tube::Moscow;

     # Object.
     my $obj = Map::Tube::Moscow->new;

     # GraphViz object.
     my $g = Map::Tube::GraphViz->new(
             'callback_node' => \&node_color_without_label,
             'tube' => $obj,
     );

     # Get graph to file.
     $g->graph('Moscow.png');

     # Print file.
     system "ls -l Moscow.png";

     # Output like:
     # -rw-r--r-- 1 skim skim 549576 Mar  9 21:39 Moscow.png

EXAMPLE4
     use strict;
     use warnings;

     use Encode qw(encode_utf8);
     use Map::Tube::Moscow;

     # Object.
     my $obj = Map::Tube::Moscow->new;

     # Get lines.
     my $lines_ar = $obj->get_lines;

     # Print out.
     map { print encode_utf8($_->name)."\n"; } sort @{$lines_ar};

     # Output:
     # Арбатско-Покровская линия
     # Бутовская линия
     # Замоскворецкая линия
     # Калининско-Солнцевская линия
     # Калужско-Рижская линия
     # Каховская линия
     # Кольцевая линия
     # Люблинско-Дмитровская линия
     # Серпуховско-Тимирязевская линия
     # Сокольническая линия
     # Таганско-Краснопресненская линия
     # Филёвская линия

EXAMPLE5
     use strict;
     use warnings;

     use Encode qw(decode_utf8 encode_utf8);
     use Map::Tube::Moscow;

     # Arguments.
     if (@ARGV < 1) {
             print STDERR "Usage: $0 line\n";
             exit 1;
     }
     my $line = decode_utf8($ARGV[0]);

     # Object.
     my $obj = Map::Tube::Moscow->new;

     # Get stations for line.
     my $stations_ar = $obj->get_stations($line);

     # Print out.
     map { print encode_utf8($_->name)."\n"; } @{$stations_ar};

     # Output:
     # Usage: __PROG__ line

     # Output with 'foo' argument.
     # Map::Tube::get_stations(): ERROR: Invalid Line Name [foo]. (status: 105) file __PROG__ on line __LINE__

     # Output with 'Бутовская линия' argument.
     # Битцевский парк
     # Лесопарковая
     # Улица Старокачаловская
     # Улица Скобелевская
     # Бульвар адмирала Ушакова
     # Улица Горчакова
     # Бунинская аллея

DEPENDENCIES
    File::Share, Map::Tube, Moo, namespace::clean.

SEE ALSO
    Map::Tube
        Core library as Role (Moo) to process map data.

    Task::Map::Tube
        Install the Map::Tube modules.

    Task::Map::Tube::Metro
        Install the Map::Tube concrete metro modules.

REPOSITORY
    <https://github.com/michal-josef-spacek/Map-Tube-Moscow>

AUTHOR
    Michal Josef Špaček <mailto:skim@cpan.org>

    <http://skim.cz>

LICENSE AND COPYRIGHT
    © 2014-2023 Michal Josef Špaček

    Artistic License

    BSD 2-Clause License

VERSION
    0.10

